// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	keto "github.com/ory/keto-maester/keto"
	mock "github.com/stretchr/testify/mock"
)

// KetoClient is an autogenerated mock type for the KetoClient type
type KetoClient struct {
	mock.Mock
}

// DeletePolicy provides a mock function with given fields: flavour, id
func (_m *KetoClient) DeletePolicy(flavour keto.Flavour, id string) error {
	ret := _m.Called(flavour, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(keto.Flavour, string) error); ok {
		r0 = rf(flavour, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: flavour, id
func (_m *KetoClient) DeleteRole(flavour keto.Flavour, id string) error {
	ret := _m.Called(flavour, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(keto.Flavour, string) error); ok {
		r0 = rf(flavour, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPolicy provides a mock function with given fields: flavour, id
func (_m *KetoClient) GetPolicy(flavour keto.Flavour, id string) (*keto.PolicyJSON, bool, error) {
	ret := _m.Called(flavour, id)

	var r0 *keto.PolicyJSON
	if rf, ok := ret.Get(0).(func(keto.Flavour, string) *keto.PolicyJSON); ok {
		r0 = rf(flavour, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keto.PolicyJSON)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(keto.Flavour, string) bool); ok {
		r1 = rf(flavour, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(keto.Flavour, string) error); ok {
		r2 = rf(flavour, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRole provides a mock function with given fields: flavour, id
func (_m *KetoClient) GetRole(flavour keto.Flavour, id string) (*keto.Role, bool, error) {
	ret := _m.Called(flavour, id)

	var r0 *keto.Role
	if rf, ok := ret.Get(0).(func(keto.Flavour, string) *keto.Role); ok {
		r0 = rf(flavour, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keto.Role)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(keto.Flavour, string) bool); ok {
		r1 = rf(flavour, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(keto.Flavour, string) error); ok {
		r2 = rf(flavour, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPolicy provides a mock function with given fields: flavour
func (_m *KetoClient) ListPolicy(flavour keto.Flavour) ([]*keto.PolicyJSON, error) {
	ret := _m.Called(flavour)

	var r0 []*keto.PolicyJSON
	if rf, ok := ret.Get(0).(func(keto.Flavour) []*keto.PolicyJSON); ok {
		r0 = rf(flavour)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keto.PolicyJSON)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(keto.Flavour) error); ok {
		r1 = rf(flavour)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRole provides a mock function with given fields: flavour
func (_m *KetoClient) ListRole(flavour keto.Flavour) ([]*keto.Role, error) {
	ret := _m.Called(flavour)

	var r0 []*keto.Role
	if rf, ok := ret.Get(0).(func(keto.Flavour) []*keto.Role); ok {
		r0 = rf(flavour)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*keto.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(keto.Flavour) error); ok {
		r1 = rf(flavour)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPolicy provides a mock function with given fields: flavour, o
func (_m *KetoClient) UpsertPolicy(flavour keto.Flavour, o *keto.PolicyJSON) (*keto.PolicyJSON, error) {
	ret := _m.Called(flavour, o)

	var r0 *keto.PolicyJSON
	if rf, ok := ret.Get(0).(func(keto.Flavour, *keto.PolicyJSON) *keto.PolicyJSON); ok {
		r0 = rf(flavour, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keto.PolicyJSON)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(keto.Flavour, *keto.PolicyJSON) error); ok {
		r1 = rf(flavour, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertRole provides a mock function with given fields: flavour, o
func (_m *KetoClient) UpsertRole(flavour keto.Flavour, o *keto.Role) (*keto.Role, error) {
	ret := _m.Called(flavour, o)

	var r0 *keto.Role
	if rf, ok := ret.Get(0).(func(keto.Flavour, *keto.Role) *keto.Role); ok {
		r0 = rf(flavour, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keto.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(keto.Flavour, *keto.Role) error); ok {
		r1 = rf(flavour, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
